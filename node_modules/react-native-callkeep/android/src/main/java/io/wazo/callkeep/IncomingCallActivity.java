package io.wazo.callkeep;

import android.annotation.SuppressLint;
import android.app.KeyguardManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.graphics.Color;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.PowerManager;
import android.os.Vibrator;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.lifecycle.AndroidViewModel;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import com.facebook.react.HeadlessJsTaskService;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.WritableMap;

import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import java.util.Timer;
import java.util.TimerTask;
import org.json.JSONException;
import org.json.JSONObject;

import io.wazo.callkeep.databinding.ActivityIncomingCallBinding;

import static io.wazo.callkeep.Constants.ACTION_ANSWER_CALL;
import static io.wazo.callkeep.Constants.ACTION_AUDIO_SESSION;
import static io.wazo.callkeep.Constants.ACTION_CHECK_REACHABILITY;
import static io.wazo.callkeep.Constants.ACTION_DTMF_TONE;
import static io.wazo.callkeep.Constants.ACTION_END_CALL;
import static io.wazo.callkeep.Constants.ACTION_END_INCOMING;
import static io.wazo.callkeep.Constants.ACTION_HOLD_CALL;
import static io.wazo.callkeep.Constants.ACTION_MUTE_CALL;
import static io.wazo.callkeep.Constants.ACTION_ONGOING_CALL;
import static io.wazo.callkeep.Constants.ACTION_SHOW_INCOMING_CALL_UI;
import static io.wazo.callkeep.Constants.ACTION_UNHOLD_CALL;
import static io.wazo.callkeep.Constants.ACTION_UNMUTE_CALL;
import static io.wazo.callkeep.Constants.ACTION_WAKE_APP;
import static io.wazo.callkeep.Constants.EXTRA_CALLER_NAME;
import static io.wazo.callkeep.Constants.EXTRA_CALL_NUMBER;
import static io.wazo.callkeep.Constants.EXTRA_CALL_UUID;

public class IncomingCallActivity
        extends BaseDataBindingActivity<ActivityIncomingCallBinding, AndroidViewModel> {
    private Timer timeoutTimer;
    private AudioManager audioManager;
    private String number;
    private String displayName;

    private MediaPlayer endPlayer;
    private final Handler handler = new Handler();
    private Ringtone ringtone;
    private PowerManager.WakeLock wakeLock;
    private KeyguardManager.KeyguardLock lock;
    private JSONObject sdpJSON;
    private Vibrator vibrator;
    private boolean checkCandidate = false;
    Handler timerHandler = new Handler();
    private long startTimer = 0;
    private IncomingcallReceiver incomingcallReceiver;

    @Override
    protected void onStop() {
        stopCallNotification();
        LocalBroadcastManager.getInstance(this).unregisterReceiver(incomingcallReceiver);
        super.onStop();
    }

    @Override
    protected int getContentViewLayoutId() {
        return R.layout.activity_incoming_call;
    }

    @Override
    protected void initListeners() {
        mBinding.setOnClickAnswer(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d("INCOMINGSCREEN", "ANSWERCALL");
                IncomingCallActivity.this.stopCallNotification();
                HashMap map = new HashMap();
                map.put("callUUID", "");
                sendCallRequestToActivity(ACTION_ANSWER_CALL, map);
                endCall("");
            }
        });

        mBinding.setOnClickReject(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d("INCOMINGSCREEN", "REJECTCALL");
                IncomingCallActivity.this.stopCallNotification();
                HashMap map = new HashMap();
                map.put("callUUID", "");
                sendCallRequestToActivity(ACTION_END_CALL, map);
                endCall("");
            }
        });

//        mBinding.setOnClickBtnEndCall( v -> {
//            mBinding.tvStatus.setText( R.string.call_ended );
//            hangUp();
//            endCall();
//        } );
    }

    private void registerReceiver() {
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(ACTION_END_INCOMING);
        incomingcallReceiver = new IncomingcallReceiver();
        LocalBroadcastManager.getInstance(this).registerReceiver(incomingcallReceiver, intentFilter);
    }

    private class IncomingcallReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {

            switch (intent.getAction()) {
                case ACTION_END_INCOMING:
                    Log.d("INCOMINGSCREEN", "EndCall");
                    endCall("");
                    break;
            }
        }
    }

    @SuppressLint("WakelockTimeout")
    @Override
    protected void initData() {
        check();
        makeCall();
        getNewIntent();
        setRingtone();
        registerReceiver();
    }

    @Override
    protected void subscribeToViewModel() {

    }

    private void setRingtone(){
        Uri notification = RingtoneManager.getDefaultUri( RingtoneManager.TYPE_RINGTONE );
        ringtone = RingtoneManager.getRingtone( getApplicationContext(), notification );
        ringtone.play();
    }

    private void getNewIntent(){
        audioManager = (AudioManager) getSystemService( AUDIO_SERVICE );
        audioManager.setSpeakerphoneOn( true );
        Intent intent = getIntent();
        number = intent.getStringExtra( EXTRA_CALL_NUMBER);
        displayName = intent.getStringExtra( EXTRA_CALLER_NAME );
        Log.e( "NUMBER", number + displayName );

        if (displayName != null) {
            mBinding.tvName.setText( number );
            mBinding.tvPhone.setText( number );
        } else {
            mBinding.tvName.setText( number );
            mBinding.tvPhone.setVisibility( View.GONE );
        }
    }

    Runnable timerRunnable = new Runnable() {
        @SuppressLint("DefaultLocale")
        @Override
        public void run() {
            long millis = System.currentTimeMillis() - startTimer;
            int seconds = (int) (millis / 1000);
            int minutes = seconds / 60;
            seconds = seconds % 60;
            mBinding.tvTime.setText( String.format( "%02d:%02d",minutes, seconds ) );
            timerHandler.postDelayed( this, 500 );
        }
    };

    private void check() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
            Log.d( "Incommingcall", "onCreate: set window flags for API level > 27" );
            getWindow().addFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN
                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON );
            KeyguardManager keyguardManager =
                    (KeyguardManager) getApplicationContext().getSystemService(
                            Context.KEYGUARD_SERVICE );
            keyguardManager.requestDismissKeyguard( this, null );
            setShowWhenLocked( true );
            setTurnScreenOn( true );
        } else {
            Log.d( "Incommingcall", "onCreate: onCreate:set window flags for API level < 27" );
            getWindow().addFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN
                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
                    | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD
                    | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED
                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON );
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            Window w = getWindow();
            w.addFlags( WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS );
            w.addFlags( WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION );
        } else {
            getWindow().setFlags( WindowManager.LayoutParams.FLAG_FULLSCREEN,
                    WindowManager.LayoutParams.FLAG_FULLSCREEN );
        }

//        lock = ((KeyguardManager) getSystemService( KEYGUARD_SERVICE )).newKeyguardLock(
//                KEYGUARD_SERVICE );
//        lock.disableKeyguard();

        PowerManager powerManager = ((PowerManager) getSystemService( Context.POWER_SERVICE ));
        wakeLock = powerManager.newWakeLock( PowerManager.FULL_WAKE_LOCK
                | PowerManager.ACQUIRE_CAUSES_WAKEUP
                | PowerManager.SCREEN_BRIGHT_WAKE_LOCK, getLocalClassName() );

        wakeLock.acquire( 10 * 60 * 1000L /*10 minutes*/ );
    }

    private void makeCall() {
        if(timeoutTimer != null) return;
        final long callStartTime = System.currentTimeMillis();
        timeoutTimer = new Timer();
        TimerTask timeoutTimerTask = new TimerTask() {
            @Override
            public void run() {
                if (System.currentTimeMillis() - callStartTime > 20000) {
                    timeoutTimer.cancel();
                    timeoutTimer.purge();
                    timeoutTimer = null;
                    HashMap map = new HashMap();
                    map.put("callUUID", "");
                    sendCallRequestToActivity(ACTION_END_CALL, map);
                    endCall("");
                }
            }
        };
        timeoutTimer.schedule( timeoutTimerTask, 0, 1000 );
    }

    private void sendCallRequestToActivity(final String action, @Nullable final HashMap attributeMap) {
        final Handler handler = new Handler();

        handler.post(new Runnable() {
            @Override
            public void run() {
                Intent intent = new Intent(action);
                if (attributeMap != null) {
                    Bundle extras = new Bundle();
                    extras.putSerializable("attributeMap", attributeMap);
                    intent.putExtras(extras);
                }
                LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
            }
        });
    }

    public void ClearTimeoutCall()
    {
        if(timeoutTimer != null) {
            timeoutTimer.cancel();
            timeoutTimer.purge();
            timeoutTimer = null;
        }
    }

    @SuppressLint("InlinedApi")
    private void endCall(String message) {
        mBinding.tvTime.setVisibility( View.GONE );
        mBinding.imNetwork.setVisibility( View.GONE );
        mBinding.vBottom.setVisibility( View.GONE );
        Window window = getWindow();
        View decorView = window.getDecorView();
        vibrator.cancel();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            decorView.setSystemUiVisibility(
                    View.SYSTEM_UI_FLAG_VISIBLE | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR );
            window.setStatusBarColor( Color.parseColor(
                    "#ffffff" ) ); // set dark color, the icon will auto change light
        }

        getWindow().clearFlags( WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
                | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD
                | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED
                | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON );

        if (wakeLock != null && wakeLock.isHeld()) {
            wakeLock.release();
        }

//        if (lock != null) {
//            lock.reenableKeyguard();
//        }

        if (ringtone != null && ringtone.isPlaying()) {
            ringtone.stop();
            ringtone = null;
        }

        if (timeoutTimer != null) {
            timeoutTimer.cancel();
        }

        finish();
    }

    private void showmessage(String message) {
        Toast toast = Toast.makeText( getApplicationContext(), message, Toast.LENGTH_LONG );
        toast.setGravity( Gravity.BOTTOM, 0, 0 );
        toast.show();
    }

    @Override
    public void onStart() {
        super.onStart();
        startCallNotification();
    }

    private void startCallNotification() {
        Log.d( "Incommingcall", "startCallNotification()" );
        vibrator = (Vibrator) this.getSystemService( Context.VIBRATOR_SERVICE );
        long[] vibrationCycle = { 0, 1000, 1000 };
        if (vibrator != null && vibrator.hasVibrator()) {
            vibrator.vibrate( vibrationCycle, 1 );
        }
    }

    private void stopCallNotification() {
        Log.d( "Incommingcall", "stopCallNotification()" );
        if (vibrator != null) {
            vibrator.cancel();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        makeCall();
    }

    @Override
    protected void onPause() {
        ClearTimeoutCall();
        super.onPause();
    }
}
